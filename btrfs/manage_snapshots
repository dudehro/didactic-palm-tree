#!/bin/bash
# https://btrfs.wiki.kernel.org/index.php/Incremental_Backup

function fail_unlesss_root(){
	if [ "$EUID" -ne 0 ]
  		then echo "Please run as root"
  		exit
	fi
}

function transfer_snapshot(){

	source_volume=$(echo "$1" | cut -d ";" -f 1)
	snapshot_location=$(echo "$1" | cut -d ";" -f 2)
	target_volume=$(echo "$1" | cut -d ";" -f 3)
	snapshot_name="@$(date +"%Y_%m_%d")"
	echo "==== Transfer Snapshot ===="
	echo "source_volume: ${source_volume}"
	echo "snapshot_location: ${snapshot_location}"
	echo "target_volume: ${target_volume}"
	echo "snapshot_name: ${snapshot_name}"

	#find last snapshot
	snapshot_name_old=$(find "$snapshot_location" -maxdepth 1 -mindepth 1 -type d -name *last | xargs -I {} basename {})
	echo "snapshot_name_old: $snapshot_name_old"

#	echo "continue with these values? [y/N]"
#	read answer
#	if [ "$answer" != "y" ]; then
#		exit
#	fi

	# make snapshot
	if [ ! -d "$snapshot_location/$snapshot_name" ]; then
        	# make local snapshot
	        btrfs subvolume snapshot -r "$source_volume" "$snapshot_location/$snapshot_name"
	fi

	# check for predecessor
	if [ -d "$snapshot_location/$snapshot_name_old" ] && [ -n "$snapshot_name_old" ]; then
		echo "Vorgänger ist $snapshot_location/$snapshot_name_old"
		btrfs send -p "$snapshot_location/$snapshot_name_old" "$snapshot_location/$snapshot_name" | btrfs receive "$target_volume"
		# rename old snapshot, remove _last postfix
		mv "$snapshot_location/$snapshot_name_old" "$snapshot_location/${snapshot_name_old:0:11}"
	else
		echo "keinen Vorgänger gefunden, sende ohne Delta"
		btrfs send "$snapshot_location/$snapshot_name" | btrfs receive "$target_volume"
	fi
	mv "$snapshot_location/$snapshot_name" "$snapshot_location/${snapshot_name}_last"
}

function transfer_snapshots_iterator(){
        config_file="$1"
        if [ -f "$config_file" ]; then
                while read volume
                do
                        transfer_snapshot "$volume" $(basename "$config_file")
                done<"$config_file"
        fi

}

function make_ro_snapshot_now(){
        NOW=$(date +"%Y_%m_%d")
        source_volume=$(echo "$1" | cut -d ";" -f 1)
        snapshot_location=$(echo "$1" | cut -d ";" -f 2)
        sudo btrfs subvolume snapshot -r "$source_volume"  "$snapshot_location/@$NOW"
}

function make_snapshots_iterator(){
	config_file="$1"
	if [ -f "$config_file" ]; then
		while read volume
		do
			make_ro_snapshot_now "$volume"
		done<"$config_file"
	fi
}

function man(){
	echo "Excuse me. What did you say?

		i needs volumes.conf, ;-seperated file
		SOURCE_VOLUME;SNAPSHOT_LOCATION;TARGET_VOLUME
		Options:
		make_snapshots volumes.conf
		transfer_snapshots volumes.conf
		"
}

fail_unlesss_root

case "$1" in
	make_snapshots)
		make_snapshots_iterator "$2"
		;;
	transfer_snapshots)
		 transfer_snapshots_iterator "$2"
		;;
	*)
		man
	;;
esac

exit 0
